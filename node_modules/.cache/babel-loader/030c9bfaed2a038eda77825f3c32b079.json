{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * @typedef {string} cell\n */\n\n/**\n * @typedef {cell[]} validateData~column\n */\n\n/**\n * @param {column[]} rows\n * @returns {undefined}\n */\n\nconst validateTableData = rows => {\n  if (!Array.isArray(rows)) {\n    throw new TypeError('Table data must be an array.');\n  }\n\n  if (rows.length === 0) {\n    throw new Error('Table must define at least one row.');\n  }\n\n  if (rows[0].length === 0) {\n    throw new Error('Table must define at least one column.');\n  }\n\n  const columnNumber = rows[0].length;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const cells = _step.value;\n\n      if (!Array.isArray(cells)) {\n        throw new TypeError('Table row data must be an array.');\n      }\n\n      if (cells.length !== columnNumber) {\n        throw new Error('Table must have a consistent number of cells.');\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = cells[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          const cell = _step2.value; // eslint-disable-next-line no-control-regex\n\n          if (/[\\u0001-\\u0006\\u0008-\\u0009\\u000B-\\u001A]/.test(cell)) {\n            throw new Error('Table data must not contain control characters.');\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nvar _default = validateTableData;\nexports.default = _default;","map":{"version":3,"sources":["../src/validateTableData.js"],"names":["rows","Array","columnNumber","cells","cell"],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAIA;;;;;0BAIgBA,I,IAAS;AACvB,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,UAAM,IAAA,SAAA,CAAN,8BAAM,CAAN;AACD;;AAED,MAAID,IAAI,CAAJA,MAAAA,KAAJ,CAAA,EAAuB;AACrB,UAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AAED,MAAIA,IAAI,CAAJA,CAAI,CAAJA,CAAAA,MAAAA,KAAJ,CAAA,EAA0B;AACxB,UAAM,IAAA,KAAA,CAAN,wCAAM,CAAN;AACD;;AAED,QAAME,YAAY,GAAGF,IAAI,CAAJA,CAAI,CAAJA,CAArB,MAAA;AAbuB,MAAA,yBAAA,GAAA,IAAA;AAAA,MAAA,iBAAA,GAAA,KAAA;AAAA,MAAA,cAAA,GAAA,SAAA;;AAAA,MAAA;AAevB,SAAA,IAAA,SAAA,GAAoBA,IAApB,CAAA,MAAA,CAAA,QAAA,CAAoBA,EAApB,EAAA,KAAA,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,IAAA,EAA0B;AAAA,YAAfG,KAAe,GAAA,KAAA,CAAA,KAAA;;AACxB,UAAI,CAACF,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2B;AACzB,cAAM,IAAA,SAAA,CAAN,kCAAM,CAAN;AACD;;AAED,UAAIE,KAAK,CAALA,MAAAA,KAAJ,YAAA,EAAmC;AACjC,cAAM,IAAA,KAAA,CAAN,+CAAM,CAAN;AACD;;AAPuB,UAAA,0BAAA,GAAA,IAAA;AAAA,UAAA,kBAAA,GAAA,KAAA;AAAA,UAAA,eAAA,GAAA,SAAA;;AAAA,UAAA;AASxB,aAAA,IAAA,UAAA,GAAmBA,KAAnB,CAAA,MAAA,CAAA,QAAA,CAAmBA,EAAnB,EAAA,MAAA,EAAA,EAAA,0BAAA,GAAA,CAAA,MAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,0BAAA,GAAA,IAAA,EAA0B;AAAA,gBAAfC,IAAe,GAAA,MAAA,CAAA,KAAA,CAAA,CACxB;;AACA,cAAI,4CAAA,IAAA,CAAJ,IAAI,CAAJ,EAA4D;AAC1D,kBAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;AACD;AACF;AAduB,OAAA,CAAA,OAAA,GAAA,EAAA;AAAA,QAAA,kBAAA,GAAA,IAAA;AAAA,QAAA,eAAA,GAAA,GAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,cAAA,CAAA,0BAAA,IAAA,UAAA,CAAA,MAAA,IAAA,IAAA,EAAA;AAAA,YAAA,UAAA,CAAA,MAAA;AAAA;AAAA,SAAA,SAAA;AAAA,cAAA,kBAAA,EAAA;AAAA,kBAAA,eAAA;AAAA;AAAA;AAAA;AAezB;AA9BsB,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,IAAA;AAAA,IAAA,cAAA,GAAA,GAAA;AAAA,GAAA,SAAA;AAAA,QAAA;AAAA,UAAA,CAAA,yBAAA,IAAA,SAAA,CAAA,MAAA,IAAA,IAAA,EAAA;AAAA,QAAA,SAAA,CAAA,MAAA;AAAA;AAAA,KAAA,SAAA;AAAA,UAAA,iBAAA,EAAA;AAAA,cAAA,cAAA;AAAA;AAAA;AAAA","sourcesContent":["/**\n * @typedef {string} cell\n */\n\n/**\n * @typedef {cell[]} validateData~column\n */\n\n/**\n * @param {column[]} rows\n * @returns {undefined}\n */\nexport default (rows) => {\n  if (!Array.isArray(rows)) {\n    throw new TypeError('Table data must be an array.');\n  }\n\n  if (rows.length === 0) {\n    throw new Error('Table must define at least one row.');\n  }\n\n  if (rows[0].length === 0) {\n    throw new Error('Table must define at least one column.');\n  }\n\n  const columnNumber = rows[0].length;\n\n  for (const cells of rows) {\n    if (!Array.isArray(cells)) {\n      throw new TypeError('Table row data must be an array.');\n    }\n\n    if (cells.length !== columnNumber) {\n      throw new Error('Table must have a consistent number of cells.');\n    }\n\n    for (const cell of cells) {\n      // eslint-disable-next-line no-control-regex\n      if (/[\\u0001-\\u0006\\u0008-\\u0009\\u000B-\\u001A]/.test(cell)) {\n        throw new Error('Table data must not contain control characters.');\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}